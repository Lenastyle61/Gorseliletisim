# AI Fotofilm Director - Production AI Service Architecture

This document outlines the AI service layer for the AI Fotofilm Director application. It details how prompts are constructed and how the application interacts with Google's AI models via a two-layer service architecture.

---

## 1. Service Architecture Overview

The application's AI interactions are managed by two distinct services:

1.  **`GoogleAIService`**: This is the low-level service responsible for making direct `fetch` requests to the Google AI REST APIs (`generativelanguage.googleapis.com`). It handles the raw communication, payload construction, and error handling for `Gemini` (text) and `Imagen` (image) models.

2.  **`FotofilmDirectorService`**: This is the high-level service that contains the application's core logic and prompt engineering. It acts as an abstraction layer, calling `GoogleAIService` with carefully crafted prompts to perform specific tasks like generating environment descriptions, suggesting outfits, or analyzing scene consistency.

This two-layer approach separates the low-level API communication from the high-level application logic, making the system cleaner and easier to maintain.

---

## 2. Core AI Functions & Prompts (`FotofilmDirectorService`)

### 2.1. Environment Description Generation

-   **Function**: `generateEnvironmentDescriptions`
-   **Goal**: To create detailed, cinematic descriptions for character interactions and the surrounding environment based on user inputs. This function makes two parallel calls to the Gemini model.

-   **Prompt 1 (Position/Interaction - EN)**:
    ```
    Act as a director. Inspired by the "Main Idea" provided, describe the body language, posture, and actions of the characters ("${characterNames}"). Write a single, concrete paragraph of no more than 3 sentences and 40 words. Avoid abstract expressions.
    - Main Idea: ${mainIdea}
    ```

-   **Prompt 2 (Environment/Background - EN)**:
    ```
    Act as a location scout. Using the "Main Idea" and other elements, describe the PHYSICAL DETAILS of the environment and background. Write a single, short paragraph of no more than 3 sentences and 50 words. Avoid abstract feelings.
    - Main Idea: ${mainIdea}
    - Other Elements: ${selectorsContext}
    ```

### 2.2. AI Outfit Suggestion

-   **Function**: `suggestOutfit`
-   **Goal**: To generate a specific, concrete, and contextually appropriate outfit suggestion using real-world brands.
-   **Output Format**: JSON (`{ "outfit": "string" }`)

-   **Prompt (EN)**:
    ```
    Act as a fashion stylist. Create a logical and concrete outfit suggestion for the character based on the provided information.
    RULES:
    1. Suggest a complete head-to-toe outfit (top, bottom, footwear). DO NOT leave any pieces missing.
    2. Use specific product models from well-known, real-world brands like Nike, Adidas, Zara, Levi's whenever possible. E.g., 'Nike Pro Dri-FIT short-sleeve black t-shirt, Levi's 501 light blue jeans, and Adidas Ultraboost 22 black running shoes.'
    3. Absolutely DO NOT use generic descriptions (like 'comfortable shorts'). Provide specific brand and model details.
    4. Your response must be a SINGLE STRING containing only the outfit description.
    CONTEXT:
    - Environment: ${environment}
    - Interaction: ${interaction}
    - User's Outfit Request: ${userRequest}
    ```

### 2.3. Scene Breakdown

-   **Function**: `breakdownConceptIntoScenes`
-   **Goal**: To break down a high-level concept into a specified number of logical, sequential scenes, complete with director's notes.

-   **Prompt (EN)**:
    ```
    Act as a director and strictly follow these rules:
    1. Do not add any comments or introductory sentences.
    2. Divide the "General Concept" below into exactly ${sceneCount} logical, sequential scenes.
    3. Start each scene with 'Scene X:'.
    4. Begin each scene's content with a director's note specifying the most appropriate camera scale and movement for that scene. E.g., 'static wide shot'. Use the provided guide.
    5. After the director's note, write a short, cinematic, and concrete paragraph describing the characters' actions and positions.
    6. Do not use abstract or literary language.
    CAMERA GUIDE: For wide shots, use 'static wide shot'. For medium/close-up shots, use 'medium shot, static' or 'close-up, static'. If movement is needed, choose slow movements like 'slow dolly in'.

    **General Concept:**
    ${mainConcept}
    ```

### 2.4. Dialogue Generation

-   **Function**: `generateDialogue`
-   **Goal**: To create short, natural-sounding Turkish dialogue that matches the action of a scene, for use in video prompts.
-   **Constraint**: The output format is strictly enforced to be machine-readable.

-   **Prompt (TR)**:
    ```
    Aşağıdaki sahne eylemlerine ve karakterlerin ses etiketlerine dayanarak, 3-4 satırlık kısa, doğal TÜRKÇE diyaloglar oluştur.
    - Eylemler:
    ${sceneSummary}
    - Karakterler ve Ses Etiketleri:
    ${characterVoiceTags}
    - Kurallar:
    1. Diyaloglar doğrudan eylemlerle ilgili olmalıdır.
    2. Her satırı KESİNLİKLE şu formatta yaz: [Karakter Adı] (SES_ETİKETİ): "Diyalog metni."
       Örnek: [Lena] (VOICE_A): "Bunu yapabileceğimize eminim."
    3. Ekstra metin, açıklama veya formatlama EKLEME. SADECE diyalog satırlarıyla yanıt ver.
    ```

### 2.5. Consistency Analysis & Automated Fixing

This is a two-step process to ensure continuity across all generated scenes.

**A. Analysis**
-   **Function**: `analyzeSceneConsistency`
-   **Goal**: To act as a film continuity supervisor and identify any inconsistencies in character appearance, outfits, environment, or story flow across a series of prompts.

-   **Prompt (EN)**:
    ```
    You are an expert film continuity supervisor. Analyze the following scene prompts... Your goal is to ensure absolute consistency for key elements...
    Key elements to check:
    1. Character Appearance...
    2. Character Outfit... IMPORTANT EXCEPTION: It is not an inconsistency if footwear information is missing for shot scales where the character's feet would not be visible...
    3. Environment...
    4. Story Flow...
    Provide your report in markdown format...

    SCENE PROMPTS:
    ${promptsText}
    ```

**B. Fixing**
-   **Function**: `fixInconsistencies`
-   **Goal**: To act as a script doctor, rewriting scene prompts to resolve all issues identified in the consistency report while preserving the original intent and formatting.
-   **Output Format**: JSON (A full array of the corrected scene objects).

-   **Prompt (EN)**:
    ```
    You are an expert script doctor and prompt engineer. You will be given a series of scene prompts and a consistency analysis report...
    Your task is to rewrite the 'fullPromptEn' and 'veo3Prompt' for each scene to resolve all the inconsistencies...
    RULES:
    1. Preserve the original intent, action, and camera direction...
    2. CRITICAL RULE: You MUST preserve the exact original formatting of the 'fullPromptEn' and 'veo3Prompt' strings...
    3. Return the corrected data as a JSON array...
    4. YOUR RESPONSE MUST BE ONLY THE JSON ARRAY...

    ORIGINAL SCENES:
    ${JSON.stringify(originalScenes)}
    
    INCONSISTENCY REPORT:
    ${report}
    ```

### 2.6. Universal Translation

-   **Function**: `translateText`
-   **Goal**: A simple, robust utility to translate text between English and Turkish.
-   **Constraint**: The AI must respond *only* with the translated text.

-   **Prompt**:
    ```
    Translate the following text from ${sourceLang} to ${targetLangFullName}. Respond ONLY with the translated text, without any additional comments, labels, or formatting.
    Text to translate:
    """
    ${text}
    """
    ```